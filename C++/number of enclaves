class Solution {
public:
    
    bool isValid(int a, int b,vector<vector<bool>>& v,vector<vector<int>>& A)
    {
        return(a<A.size() && a>=0 && b<A[0].size() && b>=0 && (!v[a][b]) && A[a][b]==1);
    }
    vector<int> X={1,-1,0,0}, Y={0,0,1,-1};
    void dfs(int i, int j,vector<vector<int>>& A,vector<vector<bool>>& visited,int &count,bool& flag)
    {
        visited[i][j]=true;
        count++;
        if(i==A.size()-1 || i==0 || j==0 || j==A[0].size()-1)
        {
            flag=true;
            //return;
        }
        
       
        
        for(int k=0;k<=3;++k)
        {
            if(isValid(i+X[k],j+Y[k],visited,A))
                dfs(i+X[k],j+Y[k],A,visited,count,flag);
        }
    }
    int numEnclaves(vector<vector<int>>& A) {
        int ans=0;
        vector<bool> ele(A[0].size(),false);
        vector<vector<bool>> visited(A.size(),ele);
        int r=A.size(),c=A[0].size();
        for(int i=0;i<r;++i)
        {
            for(int j=0;j<c;++j)
            {
                if(!visited[i][j] && A[i][j]==1)
                {
                    int count=0;
                    bool flag=false;
                    dfs(i,j,A,visited,count,flag);
                    if(!flag)
                        ans+=count;
                }
            }
        }
        return ans;   
    }
};
